// Code generated by protoc-gen-go.
// source: ambition.proto
// DO NOT EDIT!

/*
Package ambition is a generated protocol buffer package.

It is generated from these files:
	ambition.proto

It has these top-level messages:
	Action
	CreateOccurrenceRequest
	Occurrence
	User
	ActionsResponse
	OccurrencesResponse
*/
package ambition

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/TuneLab/go-truss/deftree/googlethirdparty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Action struct {
	ID         int64  `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	UserID     int64  `protobuf:"varint,2,opt,name=UserID" json:"UserID,omitempty"`
	ActionName string `protobuf:"bytes,3,opt,name=ActionName" json:"ActionName,omitempty"`
}

func (m *Action) Reset()                    { *m = Action{} }
func (m *Action) String() string            { return proto.CompactTextString(m) }
func (*Action) ProtoMessage()               {}
func (*Action) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Action) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Action) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *Action) GetActionName() string {
	if m != nil {
		return m.ActionName
	}
	return ""
}

type CreateOccurrenceRequest struct {
	UserID     int64       `protobuf:"varint,1,opt,name=UserID" json:"UserID,omitempty"`
	Occurrence *Occurrence `protobuf:"bytes,2,opt,name=Occurrence" json:"Occurrence,omitempty"`
}

func (m *CreateOccurrenceRequest) Reset()                    { *m = CreateOccurrenceRequest{} }
func (m *CreateOccurrenceRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateOccurrenceRequest) ProtoMessage()               {}
func (*CreateOccurrenceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateOccurrenceRequest) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *CreateOccurrenceRequest) GetOccurrence() *Occurrence {
	if m != nil {
		return m.Occurrence
	}
	return nil
}

type Occurrence struct {
	ID       int64  `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	ActionID int64  `protobuf:"varint,2,opt,name=ActionID" json:"ActionID,omitempty"`
	Datetime string `protobuf:"bytes,3,opt,name=Datetime" json:"Datetime,omitempty"`
	Data     string `protobuf:"bytes,4,opt,name=Data" json:"Data,omitempty"`
}

func (m *Occurrence) Reset()                    { *m = Occurrence{} }
func (m *Occurrence) String() string            { return proto.CompactTextString(m) }
func (*Occurrence) ProtoMessage()               {}
func (*Occurrence) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Occurrence) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Occurrence) GetActionID() int64 {
	if m != nil {
		return m.ActionID
	}
	return 0
}

func (m *Occurrence) GetDatetime() string {
	if m != nil {
		return m.Datetime
	}
	return ""
}

func (m *Occurrence) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type User struct {
	UserID int64 `protobuf:"varint,1,opt,name=UserID" json:"UserID,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *User) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

type ActionsResponse struct {
	Actions []*Action `protobuf:"bytes,1,rep,name=Actions" json:"Actions,omitempty"`
}

func (m *ActionsResponse) Reset()                    { *m = ActionsResponse{} }
func (m *ActionsResponse) String() string            { return proto.CompactTextString(m) }
func (*ActionsResponse) ProtoMessage()               {}
func (*ActionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ActionsResponse) GetActions() []*Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

type OccurrencesResponse struct {
	Occurrences []*Occurrence `protobuf:"bytes,1,rep,name=Occurrences" json:"Occurrences,omitempty"`
}

func (m *OccurrencesResponse) Reset()                    { *m = OccurrencesResponse{} }
func (m *OccurrencesResponse) String() string            { return proto.CompactTextString(m) }
func (*OccurrencesResponse) ProtoMessage()               {}
func (*OccurrencesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *OccurrencesResponse) GetOccurrences() []*Occurrence {
	if m != nil {
		return m.Occurrences
	}
	return nil
}

func init() {
	proto.RegisterType((*Action)(nil), "ambition.Action")
	proto.RegisterType((*CreateOccurrenceRequest)(nil), "ambition.CreateOccurrenceRequest")
	proto.RegisterType((*Occurrence)(nil), "ambition.Occurrence")
	proto.RegisterType((*User)(nil), "ambition.User")
	proto.RegisterType((*ActionsResponse)(nil), "ambition.ActionsResponse")
	proto.RegisterType((*OccurrencesResponse)(nil), "ambition.OccurrencesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Ambition service

type AmbitionClient interface {
	CreateAction(ctx context.Context, in *Action, opts ...grpc.CallOption) (*Action, error)
	CreateOccurrence(ctx context.Context, in *CreateOccurrenceRequest, opts ...grpc.CallOption) (*Occurrence, error)
	ReadActions(ctx context.Context, in *User, opts ...grpc.CallOption) (*ActionsResponse, error)
	ReadAction(ctx context.Context, in *Action, opts ...grpc.CallOption) (*Action, error)
}

type ambitionClient struct {
	cc *grpc.ClientConn
}

func NewAmbitionClient(cc *grpc.ClientConn) AmbitionClient {
	return &ambitionClient{cc}
}

func (c *ambitionClient) CreateAction(ctx context.Context, in *Action, opts ...grpc.CallOption) (*Action, error) {
	out := new(Action)
	err := grpc.Invoke(ctx, "/ambition.Ambition/CreateAction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ambitionClient) CreateOccurrence(ctx context.Context, in *CreateOccurrenceRequest, opts ...grpc.CallOption) (*Occurrence, error) {
	out := new(Occurrence)
	err := grpc.Invoke(ctx, "/ambition.Ambition/CreateOccurrence", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ambitionClient) ReadActions(ctx context.Context, in *User, opts ...grpc.CallOption) (*ActionsResponse, error) {
	out := new(ActionsResponse)
	err := grpc.Invoke(ctx, "/ambition.Ambition/ReadActions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ambitionClient) ReadAction(ctx context.Context, in *Action, opts ...grpc.CallOption) (*Action, error) {
	out := new(Action)
	err := grpc.Invoke(ctx, "/ambition.Ambition/ReadAction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Ambition service

type AmbitionServer interface {
	CreateAction(context.Context, *Action) (*Action, error)
	CreateOccurrence(context.Context, *CreateOccurrenceRequest) (*Occurrence, error)
	ReadActions(context.Context, *User) (*ActionsResponse, error)
	ReadAction(context.Context, *Action) (*Action, error)
}

func RegisterAmbitionServer(s *grpc.Server, srv AmbitionServer) {
	s.RegisterService(&_Ambition_serviceDesc, srv)
}

func _Ambition_CreateAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Action)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmbitionServer).CreateAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ambition.Ambition/CreateAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmbitionServer).CreateAction(ctx, req.(*Action))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ambition_CreateOccurrence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOccurrenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmbitionServer).CreateOccurrence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ambition.Ambition/CreateOccurrence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmbitionServer).CreateOccurrence(ctx, req.(*CreateOccurrenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ambition_ReadActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmbitionServer).ReadActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ambition.Ambition/ReadActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmbitionServer).ReadActions(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ambition_ReadAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Action)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmbitionServer).ReadAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ambition.Ambition/ReadAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmbitionServer).ReadAction(ctx, req.(*Action))
	}
	return interceptor(ctx, in, info, handler)
}

var _Ambition_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ambition.Ambition",
	HandlerType: (*AmbitionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAction",
			Handler:    _Ambition_CreateAction_Handler,
		},
		{
			MethodName: "CreateOccurrence",
			Handler:    _Ambition_CreateOccurrence_Handler,
		},
		{
			MethodName: "ReadActions",
			Handler:    _Ambition_ReadActions_Handler,
		},
		{
			MethodName: "ReadAction",
			Handler:    _Ambition_ReadAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ambition.proto",
}

func init() { proto.RegisterFile("ambition.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x52, 0x5d, 0x4b, 0xeb, 0x40,
	0x10, 0x6d, 0xda, 0xd2, 0xdb, 0x3b, 0xb9, 0xf4, 0x96, 0x55, 0x34, 0xe6, 0xa1, 0xd4, 0x7d, 0x2a,
	0x82, 0x0d, 0xc4, 0xe2, 0x83, 0xe0, 0x43, 0x31, 0x08, 0x05, 0xab, 0x12, 0xf4, 0x07, 0x6c, 0xd2,
	0x31, 0x0d, 0xd8, 0x6c, 0xdd, 0xdd, 0x3c, 0xf8, 0xeb, 0x95, 0x7c, 0x34, 0x59, 0xfb, 0x01, 0xbe,
	0x65, 0xce, 0x9c, 0x39, 0x39, 0x67, 0x66, 0xa1, 0xc7, 0x56, 0x41, 0xac, 0x62, 0x9e, 0x8c, 0xd7,
	0x82, 0x2b, 0x4e, 0xba, 0x9b, 0xda, 0xbe, 0x8f, 0x62, 0xb5, 0x4c, 0x83, 0x71, 0xc8, 0x57, 0xce,
	0x4b, 0x9a, 0xe0, 0x03, 0x0b, 0x9c, 0x88, 0x5f, 0x2a, 0x91, 0x4a, 0xe9, 0x2c, 0xf0, 0x4d, 0x09,
	0x44, 0x27, 0xe2, 0x3c, 0x7a, 0x47, 0xb5, 0x8c, 0xc5, 0x62, 0xcd, 0x84, 0xfa, 0x74, 0x58, 0x92,
	0x70, 0xc5, 0x32, 0x01, 0x59, 0x28, 0xd2, 0x67, 0xe8, 0x4c, 0xc3, 0x0c, 0x20, 0x3d, 0x68, 0xce,
	0x3c, 0xcb, 0x18, 0x1a, 0xa3, 0x96, 0xdf, 0x9c, 0x79, 0xe4, 0x04, 0x3a, 0xaf, 0x12, 0xc5, 0xcc,
	0xb3, 0x9a, 0x39, 0x56, 0x56, 0x64, 0x00, 0x50, 0x4c, 0x3c, 0xb2, 0x15, 0x5a, 0xad, 0xa1, 0x31,
	0xfa, 0xeb, 0x6b, 0x08, 0x8d, 0xe0, 0xf4, 0x4e, 0x20, 0x53, 0xf8, 0x14, 0x86, 0xa9, 0x10, 0x98,
	0x84, 0xe8, 0xe3, 0x47, 0x8a, 0x52, 0x69, 0x92, 0xc6, 0x0f, 0xc9, 0x09, 0x40, 0x4d, 0xce, 0x7f,
	0x67, 0xba, 0xc7, 0xe3, 0x2a, 0xbb, 0x26, 0xa4, 0xf1, 0xe8, 0x52, 0x9f, 0xda, 0xb1, 0x6f, 0x43,
	0xb7, 0x30, 0x55, 0x05, 0xa8, 0xea, 0xac, 0xe7, 0x31, 0x85, 0x2a, 0xae, 0x02, 0x54, 0x35, 0x21,
	0xd0, 0xf6, 0x98, 0x62, 0x56, 0x3b, 0xc7, 0xf3, 0x6f, 0x3a, 0x80, 0x76, 0xe6, 0xf4, 0x90, 0x7f,
	0x7a, 0x0b, 0xff, 0x0b, 0x6d, 0xe9, 0xa3, 0x5c, 0xf3, 0x44, 0x22, 0xb9, 0x80, 0x3f, 0x25, 0x64,
	0x19, 0xc3, 0xd6, 0xc8, 0x74, 0xfb, 0x75, 0x9e, 0xa2, 0xe1, 0x6f, 0x08, 0x74, 0x0e, 0x47, 0x75,
	0x90, 0x5a, 0xe2, 0x1a, 0x4c, 0x0d, 0x2e, 0x65, 0xf6, 0xaf, 0x45, 0x27, 0xba, 0x5f, 0x06, 0x74,
	0xa7, 0x25, 0x89, 0x4c, 0xe0, 0x5f, 0x71, 0x8d, 0xf2, 0xca, 0x3b, 0x36, 0xec, 0x1d, 0x84, 0x36,
	0xc8, 0x1c, 0xfa, 0xdb, 0x37, 0x24, 0xe7, 0x35, 0xef, 0xc0, 0x7d, 0xed, 0xbd, 0xe6, 0x68, 0x83,
	0xdc, 0x80, 0xe9, 0x23, 0x5b, 0x94, 0x79, 0x49, 0xaf, 0xa6, 0x65, 0x0b, 0xb4, 0xcf, 0xb6, 0x1d,
	0x54, 0x3b, 0xa0, 0x0d, 0xe2, 0x02, 0xd4, 0xb3, 0xbf, 0xb3, 0x1f, 0x74, 0xf2, 0xb7, 0x7d, 0xf5,
	0x1d, 0x00, 0x00, 0xff, 0xff, 0xc1, 0x17, 0xc5, 0x7f, 0x3f, 0x03, 0x00, 0x00,
}
